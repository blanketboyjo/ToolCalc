/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package main;

import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 *
 * @author Jordan
 */
public class ToolCalc extends javax.swing.JFrame {
    /*m_toolType
     * 1 = drills
     * 2 = endmills
     */
    private int m_toolType  = 1;
    
    /*m_tool (unused by endmill panel
     * 1 = drill
     * 2 = centerdrill
     * 3 = countersink
     * 4 = counterbore
     * 5 = reamer
     */
    private int m_tool      = 1;
    
    /*m_toolDim
     * 1 = normal picture
     * 2 = diameter
     * 3 = flutes (only for endmills)
     */
    private int m_toolDim   = 1;
    
    /**
     * Creates new form ToolCalc
     */
    public ToolCalc() {
        initComponents();
        m_init();
    }
    
    private void m_init(){
        btnDrill.setSelected(true);
        showMainPicture();
    }

    private boolean containsDot(String fieldString){
        return fieldString.contains(".");
    }
    
    private boolean isNumber(char valueIn){
        return Character.isDigit(valueIn);
    }
 
    private boolean shouldConsume(javax.swing.JTextField fieldIn, char charIn){
        return(!isNumber(charIn) && charIn != '.'|| charIn == '.' && containsDot(fieldIn.getText()));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JTabbedPane();
        Disclaimer = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AreaDisclaimer = new javax.swing.JTextArea();
        panelDrills = new javax.swing.JPanel();
        LabelDrillDia = new javax.swing.JLabel();
        FieldDrillDia = new javax.swing.JTextField();
        panelDrillCycle = new javax.swing.JPanel();
        btnDrill = new javax.swing.JRadioButton();
        btnReamer = new javax.swing.JRadioButton();
        btnCounterbore = new javax.swing.JRadioButton();
        btnCountersink = new javax.swing.JRadioButton();
        btnCenterDrill = new javax.swing.JRadioButton();
        LabelDrillCycle = new javax.swing.JLabel();
        FieldCuttingSpeedDrill = new javax.swing.JTextField();
        LabelCuttingSpeedDrill = new javax.swing.JLabel();
        panelEndmills = new javax.swing.JPanel();
        LabeMillDia = new javax.swing.JLabel();
        FieldMillDia = new javax.swing.JTextField();
        FieldCuttingSpeedEndMill = new javax.swing.JTextField();
        LabelCuttingSpeedEndmill = new javax.swing.JLabel();
        LabelNumberOfTeeth = new javax.swing.JLabel();
        FieldNumberOfTeeth = new javax.swing.JTextField();
        picture = new javax.swing.JLabel();
        LabelTitle = new javax.swing.JLabel();
        LabelVersion = new javax.swing.JLabel();
        LabelAuthor = new javax.swing.JLabel();
        PanelCalculatedValues = new javax.swing.JPanel();
        LabeSpindleSpeed = new javax.swing.JLabel();
        FieldSpindleSpeed = new javax.swing.JTextField();
        LabelCalculations = new javax.swing.JLabel();
        LabelFeedRate = new javax.swing.JLabel();
        FieldFeedRate = new javax.swing.JTextField();
        LabelPlungeRate = new javax.swing.JLabel();
        FieldPlungeRate = new javax.swing.JTextField();
        BtnCalculate = new javax.swing.JButton();
        LabelMaxedRpm = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tool Speed Calculator");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        container.setFocusable(false);

        Disclaimer.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                DisclaimerComponentShown(evt);
            }
        });

        AreaDisclaimer.setEditable(false);
        AreaDisclaimer.setColumns(20);
        AreaDisclaimer.setLineWrap(true);
        AreaDisclaimer.setRows(5);
        AreaDisclaimer.setText("Thank you for using this application to calculate your speeds and feeds. There are a few disclaimers that are associated with this application:\n* THE REAMER CALCULATION IS WRONG DO NOT USE IT!!!\n* This calculator is based on ideal speeds and feeds; in practice feed and plunge rate should be slower than this calculator.\n* The user should still double check the calculated numbers.\n* This calculator uses (cut speed * 12)/(tool diameter * PI) to calculate initial rpm then modifies based on tool path.\n* This calculator uses (.016 * tool diameter) to get feed per revolution of drills.\n* This calculatr uses  (.016 * tool diameter * number of teeth) to get cutting feed of endmills.\n* This calculator uses (feed per revolution * final rpm) to get the initial feed rate that is modified based on tool path.\n* This calculator uses (feed rate / 2) to get plunge rate of endmills.\n");
        AreaDisclaimer.setWrapStyleWord(true);
        AreaDisclaimer.setFocusable(false);
        jScrollPane1.setViewportView(AreaDisclaimer);

        javax.swing.GroupLayout DisclaimerLayout = new javax.swing.GroupLayout(Disclaimer);
        Disclaimer.setLayout(DisclaimerLayout);
        DisclaimerLayout.setHorizontalGroup(
            DisclaimerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DisclaimerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addContainerGap())
        );
        DisclaimerLayout.setVerticalGroup(
            DisclaimerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DisclaimerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addContainerGap())
        );

        container.addTab("Startup", Disclaimer);

        panelDrills.setFocusable(false);
        panelDrills.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                panelDrillsComponentShown(evt);
            }
        });

        LabelDrillDia.setText("Tool Diameter (Inches)");

        FieldDrillDia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                FieldDrillDiaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                FieldDrillDiaFocusLost(evt);
            }
        });
        FieldDrillDia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FieldDrillDiaKeyTyped(evt);
            }
        });

        panelDrillCycle.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelDrillCycle.setFocusable(false);

        btnDrill.setText("Drill");
        btnDrill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrillActionPerformed(evt);
            }
        });

        btnReamer.setText("Reamer");
        btnReamer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReamerActionPerformed(evt);
            }
        });

        btnCounterbore.setText("Counterbore");
        btnCounterbore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCounterboreActionPerformed(evt);
            }
        });

        btnCountersink.setText("Countersink");
        btnCountersink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCountersinkActionPerformed(evt);
            }
        });

        btnCenterDrill.setText("Center Drill");
        btnCenterDrill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCenterDrillActionPerformed(evt);
            }
        });

        LabelDrillCycle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        LabelDrillCycle.setText("Drill Path");
        LabelDrillCycle.setToolTipText("");

        javax.swing.GroupLayout panelDrillCycleLayout = new javax.swing.GroupLayout(panelDrillCycle);
        panelDrillCycle.setLayout(panelDrillCycleLayout);
        panelDrillCycleLayout.setHorizontalGroup(
            panelDrillCycleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDrillCycleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDrillCycleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnReamer)
                    .addComponent(btnDrill)
                    .addComponent(btnCounterbore)
                    .addComponent(btnCenterDrill)
                    .addGroup(panelDrillCycleLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(LabelDrillCycle))
                    .addComponent(btnCountersink))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        panelDrillCycleLayout.setVerticalGroup(
            panelDrillCycleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDrillCycleLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LabelDrillCycle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCenterDrill)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCountersink)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCounterbore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReamer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDrill)
                .addGap(12, 12, 12))
        );

        FieldCuttingSpeedDrill.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FieldCuttingSpeedDrillKeyTyped(evt);
            }
        });

        LabelCuttingSpeedDrill.setText("Cutting Speed (SFM)");

        javax.swing.GroupLayout panelDrillsLayout = new javax.swing.GroupLayout(panelDrills);
        panelDrills.setLayout(panelDrillsLayout);
        panelDrillsLayout.setHorizontalGroup(
            panelDrillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDrillsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDrillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelDrillDia)
                    .addComponent(LabelCuttingSpeedDrill))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDrillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FieldCuttingSpeedDrill)
                    .addComponent(FieldDrillDia, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelDrillCycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelDrillsLayout.setVerticalGroup(
            panelDrillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDrillsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDrillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelDrillCycle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelDrillsLayout.createSequentialGroup()
                        .addGroup(panelDrillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelDrillDia)
                            .addComponent(FieldDrillDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelDrillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FieldCuttingSpeedDrill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LabelCuttingSpeedDrill))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        container.addTab("Drill Bit", panelDrills);

        panelEndmills.setFocusable(false);
        panelEndmills.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                panelEndmillsComponentShown(evt);
            }
        });

        LabeMillDia.setText("Tool Diameter (Inches)");

        FieldMillDia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                FieldMillDiaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                FieldMillDiaFocusLost(evt);
            }
        });
        FieldMillDia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FieldMillDiaKeyTyped(evt);
            }
        });

        FieldCuttingSpeedEndMill.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FieldCuttingSpeedEndMillKeyTyped(evt);
            }
        });

        LabelCuttingSpeedEndmill.setText("Cutting Speed (SFM)");

        LabelNumberOfTeeth.setText("Number of Teeth");

        FieldNumberOfTeeth.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                FieldNumberOfTeethFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                FieldNumberOfTeethFocusLost(evt);
            }
        });
        FieldNumberOfTeeth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FieldNumberOfTeethKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout panelEndmillsLayout = new javax.swing.GroupLayout(panelEndmills);
        panelEndmills.setLayout(panelEndmillsLayout);
        panelEndmillsLayout.setHorizontalGroup(
            panelEndmillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEndmillsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEndmillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabeMillDia)
                    .addComponent(LabelCuttingSpeedEndmill)
                    .addComponent(LabelNumberOfTeeth))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEndmillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(FieldCuttingSpeedEndMill, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                    .addComponent(FieldNumberOfTeeth)
                    .addComponent(FieldMillDia))
                .addContainerGap())
        );
        panelEndmillsLayout.setVerticalGroup(
            panelEndmillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEndmillsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEndmillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabeMillDia)
                    .addComponent(FieldMillDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEndmillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FieldCuttingSpeedEndMill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelCuttingSpeedEndmill))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEndmillsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FieldNumberOfTeeth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelNumberOfTeeth))
                .addContainerGap(95, Short.MAX_VALUE))
        );

        container.addTab("End Mills", panelEndmills);

        picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/Plain.jpg"))); // NOI18N
        picture.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        picture.setFocusable(false);

        LabelTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        LabelTitle.setText("Tool Calulator");

        LabelVersion.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        LabelVersion.setText("v1.0");

        LabelAuthor.setText("by: Jordan Jones");

        PanelCalculatedValues.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        LabeSpindleSpeed.setText("Spindle Speed");

        FieldSpindleSpeed.setEditable(false);

        LabelCalculations.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LabelCalculations.setText("Final Values");

        LabelFeedRate.setText("Feed Rate (IPM)");

        FieldFeedRate.setEditable(false);

        LabelPlungeRate.setText("Plunge Rate (IPM)");

        FieldPlungeRate.setEditable(false);
        FieldPlungeRate.setToolTipText("");

        BtnCalculate.setText("Calculate");
        BtnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculate(evt);
            }
        });

        LabelMaxedRpm.setText("Spindle Speed maxed to 4000");

        javax.swing.GroupLayout PanelCalculatedValuesLayout = new javax.swing.GroupLayout(PanelCalculatedValues);
        PanelCalculatedValues.setLayout(PanelCalculatedValuesLayout);
        PanelCalculatedValuesLayout.setHorizontalGroup(
            PanelCalculatedValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCalculatedValuesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelCalculatedValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelCalculatedValuesLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(LabelMaxedRpm)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(PanelCalculatedValuesLayout.createSequentialGroup()
                        .addGroup(PanelCalculatedValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelCalculatedValuesLayout.createSequentialGroup()
                                .addComponent(LabelCalculations)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BtnCalculate)
                                .addGap(11, 11, 11))
                            .addGroup(PanelCalculatedValuesLayout.createSequentialGroup()
                                .addGroup(PanelCalculatedValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(LabeSpindleSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(LabelPlungeRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(LabelFeedRate))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelCalculatedValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(FieldPlungeRate)
                                    .addComponent(FieldFeedRate)
                                    .addComponent(FieldSpindleSpeed))))
                        .addContainerGap())))
        );
        PanelCalculatedValuesLayout.setVerticalGroup(
            PanelCalculatedValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCalculatedValuesLayout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(PanelCalculatedValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelCalculations)
                    .addComponent(BtnCalculate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelCalculatedValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabeSpindleSpeed)
                    .addComponent(FieldSpindleSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelCalculatedValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FieldFeedRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelFeedRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelCalculatedValuesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FieldPlungeRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelPlungeRate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LabelMaxedRpm)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LabelTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelVersion)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PanelCalculatedValues, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(LabelAuthor)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(picture, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelTitle)
                            .addComponent(LabelVersion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LabelAuthor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PanelCalculatedValues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 11, Short.MAX_VALUE)
                        .addComponent(picture, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCounterboreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCounterboreActionPerformed
        m_tool = 4;
        btnCenterDrill  .setSelected(false);
        btnCountersink  .setSelected(false);
        btnReamer       .setSelected(false);
        
        if(!btnCounterbore.isSelected()){
            btnDrill    .setSelected(true);
            m_tool = 1;
        }else{
            btnDrill    .setSelected(false);
        }
        showMainPicture();
    }//GEN-LAST:event_btnCounterboreActionPerformed

    private void btnCenterDrillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCenterDrillActionPerformed
        m_tool = 2;
        btnCountersink  .setSelected(false);
        btnReamer       .setSelected(false);
        btnCounterbore  .setSelected(false);
        
        if(!btnCenterDrill.isSelected()){
            btnDrill    .setSelected(true);
            m_tool = 1;
        }else{
            btnDrill    .setSelected(false);
        }
        
        showMainPicture();
    }//GEN-LAST:event_btnCenterDrillActionPerformed

    private void btnCountersinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCountersinkActionPerformed
        m_tool = 3;
        btnCenterDrill  .setSelected(false);
        btnReamer       .setSelected(false);
        btnCounterbore  .setSelected(false);
        
        if(!btnCountersink.isSelected()){
            btnDrill    .setSelected(true);
            m_tool = 1;
        }else{
            btnDrill    .setSelected(false);
        }
        
        showMainPicture();
    }//GEN-LAST:event_btnCountersinkActionPerformed

    private void btnReamerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReamerActionPerformed
        m_tool = 5;
        btnCenterDrill  .setSelected(false);
        btnCountersink  .setSelected(false);
        btnCounterbore  .setSelected(false);
        if(!btnReamer.isSelected()){
            btnDrill    .setSelected(true);
            m_tool = 1;
        }else{
            btnDrill    .setSelected(false);
        }
        showMainPicture();
    }//GEN-LAST:event_btnReamerActionPerformed

    private void btnDrillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrillActionPerformed
        btnCenterDrill  .setSelected(false);
        btnCountersink  .setSelected(false);
        btnReamer       .setSelected(false);
        btnCounterbore  .setSelected(false);
        btnDrill        .setSelected(true);
        m_tool = 1;
        showMainPicture();
    }//GEN-LAST:event_btnDrillActionPerformed

    private void panelDrillsComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelDrillsComponentShown
        m_toolType = 1;
        m_tool = 1;
        FieldSpindleSpeed   .setEnabled(true);
        FieldPlungeRate     .setEnabled(false);
        FieldFeedRate       .setEnabled(true);
        btnCenterDrill      .setSelected(false);
        btnCountersink      .setSelected(false);
        btnReamer           .setSelected(false);
        btnCounterbore      .setSelected(false);
        btnDrill            .setSelected(true);
        FieldDrillDia       .setText("");
        FieldCuttingSpeedDrill.setText("");
        FieldPlungeRate     .setText("");
        FieldFeedRate       .setText("");
        FieldSpindleSpeed   .setText("");        
        showMainPicture();
    }//GEN-LAST:event_panelDrillsComponentShown

    private void panelEndmillsComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_panelEndmillsComponentShown
        m_toolType = 2;
        FieldPlungeRate         .setEnabled(true);
        FieldFeedRate           .setEnabled(true);
        FieldSpindleSpeed       .setEnabled(true);
        FieldFeedRate           .setText("");        
        FieldSpindleSpeed       .setText("");
        FieldPlungeRate         .setText("");
        FieldCuttingSpeedEndMill.setText("");
        FieldMillDia            .setText("");
        FieldNumberOfTeeth      .setText("");        
        showMainPicture();
    }//GEN-LAST:event_panelEndmillsComponentShown

    private void calculate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculate
        boolean failed              = false;
        double spindleSpeed         = .0;
        double feedRate             = .0;
        double plungeRate           = .0;
        double diameter             = .0;
        double cutSpeed             = .0;
        double inchesPer            = .0;
        double numOfTeeth           = .0;
        String spindleSpeedString   = "";
        String feedRateString       = "";
        String plungeRateString     = "";
        if(1 == m_toolType){//drills
            try{
                diameter        = Float.parseFloat(FieldDrillDia.getText());
                cutSpeed        = Float.parseFloat(FieldCuttingSpeedDrill.getText());
                spindleSpeed    = (cutSpeed * 12/(Math.PI * diameter));
                
                if(2 == m_tool || 3 == m_tool){
                    spindleSpeed = spindleSpeed/4;
                }else if(4 == m_tool || 5 == m_tool){
                    spindleSpeed = spindleSpeed/2;
                }

                if(4000 <= spindleSpeed){
                    spindleSpeed = 4000;
                }
                
                spindleSpeed    = (double) Math.round(spindleSpeed);
                inchesPer       = diameter * .016;
                feedRate        = inchesPer * spindleSpeed;
                
                if(2 == m_tool || 3 == m_tool){
                    feedRate    = feedRate * 2;
                }else if(5 == m_tool){
                    feedRate    = feedRate * 3;
                }
                
                
                feedRate = (double) Math.round(feedRate * 100)/100;
                
            }catch(Exception e){
                failed          = true;
            }
            
        }else if(2 == m_toolType){//endmills
            try{
                diameter        = Float.parseFloat(FieldMillDia             .getText());
                cutSpeed        = Float.parseFloat(FieldCuttingSpeedEndMill .getText());
                numOfTeeth      = Float.parseFloat(FieldNumberOfTeeth       .getText());
                spindleSpeed    = (cutSpeed *12)/(Math.PI * diameter);
                if(4000 <= spindleSpeed){
                    spindleSpeed = 4000;
                }
                spindleSpeed    = (double) Math.round(spindleSpeed);
            
                inchesPer       = diameter * .016 * numOfTeeth;
                feedRate        = inchesPer * spindleSpeed;
                plungeRate      = feedRate/2;
            }catch(Exception e){
                failed          = true;
            }
        }
        
        if(!failed){
            if(.0 != spindleSpeed){
                spindleSpeedString += spindleSpeed;
            }else{
                spindleSpeedString  = "Please";
            }  
            
            if(.0 != feedRate){
                feedRateString     += feedRate;
            }else{
                feedRateString      = "fill all";
            }
            
            if(.0 != plungeRate){
                plungeRateString   += plungeRate;
            }else{
                plungeRateString    = "boxes";
            }
        }else{
            spindleSpeedString      = "Please";
            feedRateString          = "fill all";
            plungeRateString        = "boxes";
        }
        FieldSpindleSpeed   .setText(spindleSpeedString);
        FieldFeedRate       .setText(feedRateString);
        FieldPlungeRate     .setText(plungeRateString);
        
    }//GEN-LAST:event_calculate

    private void FieldDrillDiaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FieldDrillDiaFocusGained
        m_toolDim   = 2;
        showMainPicture();
    }//GEN-LAST:event_FieldDrillDiaFocusGained

    private void FieldDrillDiaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FieldDrillDiaFocusLost
        m_toolDim  = 1;
        showMainPicture();
    }//GEN-LAST:event_FieldDrillDiaFocusLost

    private void FieldMillDiaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FieldMillDiaFocusLost
        m_toolDim  = 1;
        showMainPicture();
    }//GEN-LAST:event_FieldMillDiaFocusLost

    private void FieldMillDiaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FieldMillDiaFocusGained
        m_toolDim   = 2;
        showMainPicture();
    }//GEN-LAST:event_FieldMillDiaFocusGained

    private void DisclaimerComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_DisclaimerComponentShown
        m_toolType = 0;
        FieldPlungeRate.setEnabled(false);
        FieldPlungeRate.setText("");
        FieldFeedRate.setEnabled(false);
        FieldFeedRate.setText("");
        FieldSpindleSpeed.setEnabled(false);
        FieldSpindleSpeed.setText("");
        showMainPicture(); 
    }//GEN-LAST:event_DisclaimerComponentShown

    private void FieldNumberOfTeethFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FieldNumberOfTeethFocusGained
        m_toolDim   = 3;
        showMainPicture();
    }//GEN-LAST:event_FieldNumberOfTeethFocusGained

    private void FieldNumberOfTeethFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FieldNumberOfTeethFocusLost
        m_toolDim   = 1;
        showMainPicture();
    }//GEN-LAST:event_FieldNumberOfTeethFocusLost

    private void FieldCuttingSpeedDrillKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FieldCuttingSpeedDrillKeyTyped
        if(shouldConsume(FieldCuttingSpeedDrill,evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_FieldCuttingSpeedDrillKeyTyped

    private void FieldDrillDiaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FieldDrillDiaKeyTyped
        if(shouldConsume(FieldDrillDia,evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_FieldDrillDiaKeyTyped

    private void FieldMillDiaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FieldMillDiaKeyTyped
        if(shouldConsume(FieldMillDia,evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_FieldMillDiaKeyTyped

    private void FieldCuttingSpeedEndMillKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FieldCuttingSpeedEndMillKeyTyped
        if(shouldConsume(FieldCuttingSpeedEndMill,evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_FieldCuttingSpeedEndMillKeyTyped

    private void FieldNumberOfTeethKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FieldNumberOfTeethKeyTyped
        if(shouldConsume(FieldNumberOfTeeth,evt.getKeyChar())){
            evt.consume();
        }
    }//GEN-LAST:event_FieldNumberOfTeethKeyTyped

    private void showMainPicture(){
        if(1 == m_toolType){
            if(1 == m_tool){
                if(2 == m_toolDim){
                    picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/drill/DiaDrill.jpg")));                    
                }else{
                    picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/drill/PlainDrill.jpg")));
                }
            }else if(2 == m_tool){
                if(2 == m_toolDim){
                    picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/centerdrill/DiaCenterdrill.jpg")));
                }else{
                    picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/centerdrill/PlainCenterdrill.jpg")));
                }
            }else if(3 == m_tool){
                if(2 == m_toolDim){
                    picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/countersink/DiaCountersink.jpg")));
                }else{
                    picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/countersink/PlainCountersink.jpg")));
                }
            }else if(4 == m_tool){
                if(2 == m_toolDim){
                    picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/counterbore/DiaCounterbore.jpg")));
                }else{
                    picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/counterbore/PlainCounterbore.jpg")));
                }
            }else if(5 == m_tool){
                if(2 == m_toolDim){
                    picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/reamer/DiaReamer.jpg")));
                }else{
                    picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/reamer/PlainReamer.jpg")));
                }
            }
        }else if(2 == m_toolType){
            if(2 == m_toolDim){
                picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/endmill/DiaEndmill.jpg")));
            }else if(3 == m_toolDim){
                picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/endmill/FlutesEndmill.jpg")));
            }else{
                picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/endmill/PlainEndmill.jpg")));
            }
        }else{
                picture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/picture/machining.gif")));
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ToolCalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ToolCalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ToolCalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ToolCalc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        final ToolCalc mainPanel = new ToolCalc();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 mainPanel.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea AreaDisclaimer;
    private javax.swing.JButton BtnCalculate;
    private javax.swing.JPanel Disclaimer;
    private javax.swing.JTextField FieldCuttingSpeedDrill;
    private javax.swing.JTextField FieldCuttingSpeedEndMill;
    private javax.swing.JTextField FieldDrillDia;
    private javax.swing.JTextField FieldFeedRate;
    private javax.swing.JTextField FieldMillDia;
    private javax.swing.JTextField FieldNumberOfTeeth;
    private javax.swing.JTextField FieldPlungeRate;
    private javax.swing.JTextField FieldSpindleSpeed;
    private javax.swing.JLabel LabeMillDia;
    private javax.swing.JLabel LabeSpindleSpeed;
    private javax.swing.JLabel LabelAuthor;
    private javax.swing.JLabel LabelCalculations;
    private javax.swing.JLabel LabelCuttingSpeedDrill;
    private javax.swing.JLabel LabelCuttingSpeedEndmill;
    private javax.swing.JLabel LabelDrillCycle;
    private javax.swing.JLabel LabelDrillDia;
    private javax.swing.JLabel LabelFeedRate;
    private javax.swing.JLabel LabelMaxedRpm;
    private javax.swing.JLabel LabelNumberOfTeeth;
    private javax.swing.JLabel LabelPlungeRate;
    private javax.swing.JLabel LabelTitle;
    private javax.swing.JLabel LabelVersion;
    private javax.swing.JPanel PanelCalculatedValues;
    private javax.swing.JRadioButton btnCenterDrill;
    private javax.swing.JRadioButton btnCounterbore;
    private javax.swing.JRadioButton btnCountersink;
    private javax.swing.JRadioButton btnDrill;
    private javax.swing.JRadioButton btnReamer;
    private javax.swing.JTabbedPane container;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelDrillCycle;
    private javax.swing.JPanel panelDrills;
    private javax.swing.JPanel panelEndmills;
    private javax.swing.JLabel picture;
    // End of variables declaration//GEN-END:variables
}
